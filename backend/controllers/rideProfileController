//Add in required constants:
const rideProfile = require("../models/rideProfileModel").rideProfile; //Require User model
const jwt = require("jsonwebtoken");

//----------------------- DEFINE USER CONTROLLER ------------------------// 

//Function to add a users RideProfile to the database
exports.addRideProfile = async (req , res) =>{
    console.log("rideProfileController.. addRideProfile... running");
    const {name, pronouns, preferredMusic, conversationPreference, bio} = req.body;
    const token = req.cookies.auth_token; // Get token from cookies
    if (!token) {
        return res.redirect("/?error=notLoggedIn"); //Return user to homepage if no token is found (User should not be able to perform this function)
    }
    try{
        const decoded = jwt.verify(token, process.env.JWT_SECRET); //decode token to get user information
        const userID = decoded.id;
        const profile = await rideProfile.addRideProfileToDatabase({userID, name, pronouns, preferredMusic, conversationPreference, bio});
        if (profile instanceof rideProfile){
            console.log("RideProfile added successfully for user ID:", userID);
            return res.redirect("/User/Profile"); //Redirect user to profile page if ride profile is added successfully (The user route will handle whether they have a ride profile or not)
        }
    }catch(error){
        console.log("Error in rideProfile Controller:", error);
        return res.redirect("/User/Profile"); //Catch error and return user to profile page (The user route will handle whether they have a ride profile or not)
    }
};


//Function to update a users RideProfile to the database
exports.updateRideProfile = async (req, res) =>{
    console.log("ride profileController.. Updateride profile... running");
    const {pronouns, preferredMusic, conversationPreference, bio} = req.body;
    const token = req.cookies.auth_token; // Get token from cookies if it is there
    if(!token){
        return res.redirect("/User/Profile"); //Return user to homepage if no token is found (User should not be able to perform this function)
    }
    try{
        const decoded = jwt.verify(token, process.env.JWT_SECRET); //decode token to get user information
        const update = await rideProfile.updateRideProfile(decoded.id, {pronouns, preferredMusic, conversationPreference, bio}); // Returns true if update was sucessful and vice versa
        if(update){
            console.log("ride profile updated successfully for user ID:", decoded.id);
            return res.redirect("/User/Profile"); //Redirect user to profile page if ride profile is updated successfully (The user route will handle ride profile information)
        }else{
            console.log("Error updating ride profile for user ID:", decoded.id);
            return res.redirect("/User/Profile"); //Catch error and return user to profile page (The user route will handle ride profile information)
        }
    }catch(error){
        console.log("Error in Updateride profile Controller:", error);
        return res.redirect("/User/Profile"); //Catch error and return user to profile page (The user route will handle whether they have a ride profile or not)
    }
};